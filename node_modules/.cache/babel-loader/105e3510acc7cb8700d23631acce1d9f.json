{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dokumente\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React\\xDCbung\\\\quizapp\\\\src\\\\components\\\\RandomQuizGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport QuestionCategorys from './QuestionCategorys';\nimport QuestionDifficultys from './QuestionDifficultys';\nimport axios from \"axios\";\nimport QuestionCount from \"./QuestionCount\";\nimport RandomQuizList from \"./RandomQuizList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RandomQuizGenerator = () => {\n  _s();\n\n  const apiurl = \"https://the-trivia-api.com/api/categories\";\n  const allDifficultys = [{\n    active: null,\n    difficulty: 'Easy'\n  }, {\n    active: null,\n    difficulty: 'Medium'\n  }, {\n    active: null,\n    difficulty: 'Hard'\n  }];\n  const baseQuizConfig = {\n    difficulty: null,\n    categorie: null,\n    count: null\n  };\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [difficultys, setDifficulty] = useState(allDifficultys);\n  const [quizConfig, setQuizConfig] = useState(baseQuizConfig);\n  const [quizStart, setQuizState] = useState(false);\n  const [questions, setQuestions] = useState(false);\n\n  const getCategorieArrayObjext = cats => {\n    let newCatOby = [];\n    cats.map(item => {\n      newCatOby.push({\n        active: null,\n        categorie: item\n      });\n    });\n    return newCatOby;\n  };\n\n  const getCategory = index => {\n    let quizCategorys = [...categories];\n    let newQuizConfig = { ...quizConfig\n    };\n    quizCategorys.forEach(item => {\n      item.active = false;\n    });\n    quizCategorys[index].active = true;\n    setCategories(quizCategorys);\n    newQuizConfig.categorie = quizCategorys[index].categorie;\n    setQuizConfig(newQuizConfig);\n  };\n\n  const getDifficulty = index => {\n    let quizDifficultys = [...difficultys];\n    let newQuizConfig = { ...quizConfig\n    };\n    quizDifficultys.forEach(item => {\n      item.active = false;\n    });\n    quizDifficultys[index].active = true;\n    setDifficulty(quizDifficultys);\n    newQuizConfig.difficulty = quizDifficultys[index].difficulty;\n    setQuizConfig(newQuizConfig);\n  };\n\n  const getQuestionCount = event => {\n    var count = event.currentTarget.value;\n    let newQuizConfig = { ...quizConfig\n    };\n    newQuizConfig.count = count;\n    setQuizConfig(newQuizConfig);\n  };\n\n  const getQuizConfig = event => {\n    if (quizConfig.categorie === null) {\n      alert(\"Bitte Kategorie auswählen\");\n    } else if (quizConfig.difficulty === null) {\n      alert(\"Bitte Schwierigkeit auswählen\");\n    } else if (!quizConfig.count) {\n      alert(\"Bitte Fragemenge eingeben\");\n    }\n\n    if (quizConfig.categorie != null & !!quizConfig.count & quizConfig.difficulty != null) {\n      var newApiUrl = \"https://the-trivia-api.com/api/questions?categories=\" + quizConfig.categorie.toLowerCase() + \"&limit=\" + quizConfig.count + \"&difficulty=\" + quizConfig.difficulty.toLowerCase();\n      setQuizState(true);\n      getQuestions(newApiUrl);\n    }\n  };\n\n  const getCaregories = async () => {\n    const res = await axios.get(apiurl);\n    setCategories(getCategorieArrayObjext(Object.keys(res.data)));\n    setLoading(false);\n  };\n\n  const getQuestions = async url => {\n    const res = await axios.get(url);\n    setQuestions(res.data);\n  };\n\n  useEffect(() => {\n    getCaregories();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Fragebogen-Erstellen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Wait for Api...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : !quizStart ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(QuestionCategorys, {\n        setCategorie: getCategory,\n        categories: categories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionDifficultys, {\n        setDifficulty: getDifficulty,\n        difficultys: difficultys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCount, {\n        setCount: getQuestionCount,\n        startQuiz: getQuizConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"quizStartet\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Quiz geht los\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RandomQuizList, {\n        allQuestions: questions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RandomQuizGenerator, \"gzglNhMSjv1ZLHBMRfIBB0JXIBk=\");\n\n_c = RandomQuizGenerator;\nexport default RandomQuizGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomQuizGenerator\");","map":{"version":3,"names":["React","useEffect","useState","QuestionCategorys","QuestionDifficultys","axios","QuestionCount","RandomQuizList","RandomQuizGenerator","apiurl","allDifficultys","active","difficulty","baseQuizConfig","categorie","count","categories","setCategories","loading","setLoading","difficultys","setDifficulty","quizConfig","setQuizConfig","quizStart","setQuizState","questions","setQuestions","getCategorieArrayObjext","cats","newCatOby","map","item","push","getCategory","index","quizCategorys","newQuizConfig","forEach","getDifficulty","quizDifficultys","getQuestionCount","event","currentTarget","value","getQuizConfig","alert","newApiUrl","toLowerCase","getQuestions","getCaregories","res","get","Object","keys","data","url"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/ReactÜbung/quizapp/src/components/RandomQuizGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport QuestionCategorys from './QuestionCategorys'\r\nimport QuestionDifficultys from './QuestionDifficultys'\r\nimport axios from \"axios\";\r\nimport QuestionCount from \"./QuestionCount\";\r\nimport RandomQuizList from \"./RandomQuizList\";\r\n\r\n\r\nconst RandomQuizGenerator = () => {\r\n  const apiurl = \"https://the-trivia-api.com/api/categories\";\r\n  const allDifficultys = [\r\n    { active: null, difficulty: 'Easy' },\r\n    { active: null, difficulty: 'Medium' },\r\n    { active: null, difficulty: 'Hard' }\r\n  ];\r\n\r\n  const baseQuizConfig = {\r\n    difficulty: null,\r\n    categorie: null,\r\n    count: null\r\n  };\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [difficultys, setDifficulty] = useState(allDifficultys);\r\n  const [quizConfig, setQuizConfig] = useState(baseQuizConfig);\r\n  const [quizStart, setQuizState] = useState(false);\r\n  const [questions, setQuestions] = useState(false);\r\n\r\n\r\n\r\n  const getCategorieArrayObjext = (cats) => {\r\n    let newCatOby = [];\r\n\r\n    cats.map(item => {\r\n      newCatOby.push({ active: null, categorie: item })\r\n    })\r\n    return newCatOby;\r\n  }\r\n\r\n  const getCategory = (index) => {\r\n    let quizCategorys = [...categories];\r\n    let newQuizConfig = { ...quizConfig };\r\n\r\n    quizCategorys.forEach(item => {\r\n      item.active = false;\r\n    })\r\n    quizCategorys[index].active = true;\r\n\r\n    setCategories(quizCategorys);\r\n\r\n    newQuizConfig.categorie = quizCategorys[index].categorie;\r\n    setQuizConfig(newQuizConfig);\r\n\r\n  }\r\n  const getDifficulty = (index) => {\r\n    let quizDifficultys = [...difficultys];\r\n    let newQuizConfig = { ...quizConfig };\r\n\r\n    quizDifficultys.forEach(item => {\r\n      item.active = false;\r\n    })\r\n    quizDifficultys[index].active = true;\r\n\r\n    setDifficulty(quizDifficultys);\r\n\r\n    newQuizConfig.difficulty = quizDifficultys[index].difficulty;\r\n    setQuizConfig(newQuizConfig);\r\n\r\n  }\r\n  const getQuestionCount = (event) => {\r\n    var count = event.currentTarget.value;\r\n    let newQuizConfig = { ...quizConfig };\r\n    newQuizConfig.count = count\r\n    setQuizConfig(newQuizConfig);\r\n  }\r\n\r\n  const getQuizConfig = (event) => {\r\n\r\n\r\n    if (quizConfig.categorie === null) {\r\n      alert(\"Bitte Kategorie auswählen\");\r\n    } else if (quizConfig.difficulty === null) {\r\n      alert(\"Bitte Schwierigkeit auswählen\");\r\n    } else if (!quizConfig.count) {\r\n      alert(\"Bitte Fragemenge eingeben\");\r\n    }\r\n\r\n    if (quizConfig.categorie != null & !!quizConfig.count & quizConfig.difficulty != null) {\r\n\r\n      var newApiUrl = \"https://the-trivia-api.com/api/questions?categories=\" +\r\n        quizConfig.categorie.toLowerCase() + \"&limit=\" + quizConfig.count + \"&difficulty=\" + quizConfig.difficulty.toLowerCase();\r\n\r\n      setQuizState(true)\r\n      getQuestions(newApiUrl);\r\n    }\r\n  }\r\n\r\n  const getCaregories = async () => {\r\n\r\n\r\n    const res = await axios.get(apiurl);\r\n    setCategories(getCategorieArrayObjext(Object.keys(res.data)));\r\n    setLoading(false);\r\n  };\r\n\r\n  const getQuestions = async (url) => {\r\n    const res = await axios.get(url);\r\n    setQuestions(res.data)\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCaregories();\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <header>\r\n        <h1>Fragebogen-Erstellen</h1>\r\n      </header>\r\n      {loading ? (\r\n        <h4>Wait for Api...</h4>) :\r\n\r\n        !quizStart ? \r\n        (\r\n          <React.Fragment>\r\n            <QuestionCategorys\r\n              setCategorie={getCategory}\r\n              categories={categories}\r\n            ></QuestionCategorys>\r\n\r\n            <QuestionDifficultys\r\n              setDifficulty={getDifficulty}\r\n              difficultys={difficultys}\r\n            ></QuestionDifficultys>\r\n\r\n            <QuestionCount\r\n              setCount={getQuestionCount}\r\n              startQuiz={getQuizConfig}\r\n            ></QuestionCount>\r\n          </React.Fragment>\r\n\r\n        ) : (\r\n        <section className=\"quizStartet\">\r\n          <header>\r\n            <h2>Quiz geht los</h2>\r\n          </header>\r\n\r\n          <RandomQuizList\r\n          allQuestions = {questions}\r\n          ></RandomQuizList>\r\n\r\n        </section>\r\n        )\r\n      }\r\n    </section>\r\n\r\n  )\r\n}\r\n\r\nexport default RandomQuizGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module"}