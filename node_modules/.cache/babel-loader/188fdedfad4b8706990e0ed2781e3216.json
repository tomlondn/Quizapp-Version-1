{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Question from './Question';\n\nconst RandomQuizList = _ref => {\n  _s();\n\n  let {\n    easyQuestions,\n    mediumQuestions,\n    hardQuestions,\n    setState,\n    changeScore,\n    dasistmeintest\n  } = _ref;\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n\n  const setAllQuestions = () => {\n    let allQuestions = [];\n    console.log(hard);\n    Questions.push(easy);\n    Questions.push(medium);\n    Questions.push(hard);\n  };\n\n  const checkAnswer = event => {\n    var answerPossibilities = document.getElementsByClassName(event.currentTarget.className);\n\n    for (var answerPossibilitie of answerPossibilities) {\n      if (answerPossibilitie.getAttribute(\"correct\") === \"yes\") {\n        var correctAnswer = answerPossibilitie;\n      }\n    }\n\n    if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\n      event.currentTarget.style.backgroundColor = \"green\";\n      event.currentTarget.style.color = \"white\";\n      changeScore();\n    } else {\n      correctAnswer.className = correctAnswer.className + \"blinking\";\n      event.currentTarget.style.backgroundColor = \"red\";\n      event.currentTarget.style.color = \"white\";\n    }\n\n    setTimeout(nextQuestion, 2000);\n  };\n\n  const nextQuestion = () => {\n    if (currentQuestion === allQuestions.length - 1) {\n      setState(\"score\");\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n\n  return '' // <section className='quizList'>\n  //     <div>Question <span id=\"actualQuestionPosition\">{(currentQuestion < allQuestions.length) ? currentQuestion + 1 : currentQuestion}</span> of {allQuestions.length} </div>\n  //     {allQuestions.map((item, index) => {\n  //         // console.log(item)\n  //         if (index === currentQuestion) {\n  //             return (\n  //                 <Question\n  //                     key={index}\n  //                     questionIndex={index}\n  //                     questionName={item.question}\n  //                     correctAnswer={item.correctAnswer}\n  //                     incorrectAnswers={item.incorrectAnswers}\n  //                     checkAnswer={checkAnswer}\n  //                     changeQuestion={nextQuestion}\n  //                 ></Question>\n  //             )\n  //         }else {\n  //             return ('');\n  //         }\n  //     })}\n  // </section>\n  ;\n};\n\n_s(RandomQuizList, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n\n_c = RandomQuizList;\nexport default RandomQuizList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomQuizList\");","map":{"version":3,"names":["React","useState","Question","RandomQuizList","easyQuestions","mediumQuestions","hardQuestions","setState","changeScore","dasistmeintest","currentQuestion","setCurrentQuestion","setAllQuestions","allQuestions","console","log","hard","Questions","push","easy","medium","checkAnswer","event","answerPossibilities","document","getElementsByClassName","currentTarget","className","answerPossibilitie","getAttribute","correctAnswer","style","backgroundColor","color","setTimeout","nextQuestion","length"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/RandomQuizList.js"],"sourcesContent":["import React, { useState }  from 'react'\r\nimport Question from './Question'\r\n\r\n    \r\n\r\nconst RandomQuizList = ({ easyQuestions, mediumQuestions, hardQuestions, setState, changeScore, dasistmeintest }) => {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n    const setAllQuestions = () => {\r\n        let allQuestions = [];\r\n\r\n        console.log(hard);\r\n        Questions.push(easy);\r\n        Questions.push(medium);\r\n        Questions.push(hard);\r\n    }\r\n\r\n    const checkAnswer = (event) => {\r\n        var answerPossibilities = document.getElementsByClassName(event.currentTarget.className);\r\n\r\n            for (var answerPossibilitie of answerPossibilities) {\r\n                if (answerPossibilitie.getAttribute(\"correct\") === \"yes\") {\r\n                    var correctAnswer = answerPossibilitie;\r\n                }\r\n            }\r\n\r\n            if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\r\n\r\n                event.currentTarget.style.backgroundColor = \"green\";\r\n                event.currentTarget.style.color = \"white\";\r\n\r\n                changeScore();\r\n              \r\n            } else {\r\n                correctAnswer.className = correctAnswer.className + \"blinking\"\r\n\r\n                event.currentTarget.style.backgroundColor = \"red\";\r\n                event.currentTarget.style.color = \"white\";\r\n            }\r\n\r\n            setTimeout(nextQuestion, 2000);\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestion === allQuestions.length - 1) {\r\n            setState(\"score\");\r\n        } else {\r\n            setCurrentQuestion(currentQuestion + 1);\r\n        }\r\n    }\r\n\r\n    return ( ''\r\n        // <section className='quizList'>\r\n        //     <div>Question <span id=\"actualQuestionPosition\">{(currentQuestion < allQuestions.length) ? currentQuestion + 1 : currentQuestion}</span> of {allQuestions.length} </div>\r\n        //     {allQuestions.map((item, index) => {\r\n        //         // console.log(item)\r\n        //         if (index === currentQuestion) {\r\n        //             return (\r\n        //                 <Question\r\n        //                     key={index}\r\n        //                     questionIndex={index}\r\n        //                     questionName={item.question}\r\n        //                     correctAnswer={item.correctAnswer}\r\n        //                     incorrectAnswers={item.incorrectAnswers}\r\n        //                     checkAnswer={checkAnswer}\r\n        //                     changeQuestion={nextQuestion}\r\n        //                 ></Question>\r\n        //             )\r\n        //         }else {\r\n        //             return ('');\r\n        //         }\r\n        //     })}\r\n        // </section>\r\n    )\r\n}\r\nexport default RandomQuizList"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAIA,MAAMC,cAAc,GAAG,QAA8F;EAAA;;EAAA,IAA7F;IAAEC,aAAF;IAAiBC,eAAjB;IAAkCC,aAAlC;IAAiDC,QAAjD;IAA2DC,WAA3D;IAAwEC;EAAxE,CAA6F;EACjH,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,CAAD,CAAtD;;EAEA,MAAMW,eAAe,GAAG,MAAM;IAC1B,IAAIC,YAAY,GAAG,EAAnB;IAEAC,OAAO,CAACC,GAAR,CAAYC,IAAZ;IACAC,SAAS,CAACC,IAAV,CAAeC,IAAf;IACAF,SAAS,CAACC,IAAV,CAAeE,MAAf;IACAH,SAAS,CAACC,IAAV,CAAeF,IAAf;EACH,CAPD;;EASA,MAAMK,WAAW,GAAIC,KAAD,IAAW;IAC3B,IAAIC,mBAAmB,GAAGC,QAAQ,CAACC,sBAAT,CAAgCH,KAAK,CAACI,aAAN,CAAoBC,SAApD,CAA1B;;IAEI,KAAK,IAAIC,kBAAT,IAA+BL,mBAA/B,EAAoD;MAChD,IAAIK,kBAAkB,CAACC,YAAnB,CAAgC,SAAhC,MAA+C,KAAnD,EAA0D;QACtD,IAAIC,aAAa,GAAGF,kBAApB;MACH;IACJ;;IAED,IAAIN,KAAK,CAACI,aAAN,CAAoBG,YAApB,CAAiC,SAAjC,MAAgD,KAApD,EAA2D;MAEvDP,KAAK,CAACI,aAAN,CAAoBK,KAApB,CAA0BC,eAA1B,GAA4C,OAA5C;MACAV,KAAK,CAACI,aAAN,CAAoBK,KAApB,CAA0BE,KAA1B,GAAkC,OAAlC;MAEAzB,WAAW;IAEd,CAPD,MAOO;MACHsB,aAAa,CAACH,SAAd,GAA0BG,aAAa,CAACH,SAAd,GAA0B,UAApD;MAEAL,KAAK,CAACI,aAAN,CAAoBK,KAApB,CAA0BC,eAA1B,GAA4C,KAA5C;MACAV,KAAK,CAACI,aAAN,CAAoBK,KAApB,CAA0BE,KAA1B,GAAkC,OAAlC;IACH;;IAEDC,UAAU,CAACC,YAAD,EAAe,IAAf,CAAV;EACP,CAxBD;;EA0BA,MAAMA,YAAY,GAAG,MAAM;IACvB,IAAIzB,eAAe,KAAKG,YAAY,CAACuB,MAAb,GAAsB,CAA9C,EAAiD;MAC7C7B,QAAQ,CAAC,OAAD,CAAR;IACH,CAFD,MAEO;MACHI,kBAAkB,CAACD,eAAe,GAAG,CAAnB,CAAlB;IACH;EACJ,CAND;;EAQA,OAAS,EAAT,CACI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EArBJ;AAuBH,CArED;;GAAMP,c;;KAAAA,c;AAsEN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}