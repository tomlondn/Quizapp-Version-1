{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tompi\\\\Documents\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React-Projekte\\\\quizapp\\\\src\\\\components\\\\CountryQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport InputField from './InputField';\nimport GuessedCountrys from './GuessedCountrys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryQuiz = () => {\n  _s();\n  const apiUrl = \"https://restcountries.com/v3.1/all\";\n  const [quizState, setQuizState] = useState(\"generate\");\n  const [countryToGuess, setCountryToGuess] = useState({});\n  const [guessedCountrys, setGuessedCountrys] = useState([]);\n  const [allCountrys, setCountrys] = useState([]);\n  const [guesses, setGuesses] = useState(5);\n  const callApi = async () => {\n    const res = await axios.get(apiUrl);\n    formatApiCountryData(res.data);\n  };\n  const formatApiCountryData = apiData => {\n    let filteredData = [];\n    apiData.forEach(item => {\n      var _item$capital, _item$continents;\n      filteredData.push({\n        \"name\": item.translations.deu.common,\n        \"population\": item.population,\n        \"capital\": (_item$capital = item.capital) === null || _item$capital === void 0 ? void 0 : _item$capital[0],\n        \"continent\": (_item$continents = item.continents) === null || _item$continents === void 0 ? void 0 : _item$continents[0],\n        \"area\": item.area\n      });\n    });\n    setCountrys(filteredData);\n    var keys = Object.keys(filteredData);\n    setCountryToGuess(filteredData[keys[keys.length * Math.random() << 0]]);\n  };\n  const generateSessionStorage = country => {\n    window.sessionStorage.setItem(\"lastGuessed\", country);\n  };\n  const checkCountry = e => {\n    let searchedCountry = {\n      ...countryToGuess\n    };\n    let alreadyGuessed = [...guessedCountrys];\n    let countrys = [...allCountrys];\n    let remainingGuesses = guesses;\n    let lastGuessed = window.sessionStorage.getItem(\"lastGuessed\");\n    let allCountryNames = countrys.map(value => value.name);\n    var input = e.currentTarget;\n    var countryError = document.getElementById(\"noValidInput\");\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      if (allCountryNames.includes(input.value) === false) {\n        countryError.innerHTML = \"Bitte eingabe Überprüfen\";\n        countryError.style.color = \"red\";\n      } else if (input.value === searchedCountry.name) {\n        alert(\"Glückwunsch das gesuchte Land war \" + searchedCountry.name);\n      } else {\n        countryError.innerHTML = \"\";\n        countryError.style.color = \"black\";\n        alreadyGuessed = countrys.map(item => item.name === input.value ? item : \"\").filter(item === \"\");\n        console.log(alreadyGuessed);\n\n        /*countrys.forEach((countryitem) => {\r\n            if (input.value === countryitem.name) {\r\n                  generateSessionStorage(countryitem.name);\r\n                  if (countryitem.name !== lastGuessed) {\r\n                      alreadyGuessed.push(countryitem);\r\n                    setGuesses(remainingGuesses - 1)\r\n                }\r\n                  setGuessedCountrys(alreadyGuessed);\r\n              }\r\n              })*/\n      }\n    }\n  };\n\n  const startQuiz = e => {\n    e.preventDefault();\n    callApi();\n    setQuizState(\"guess\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"countryQuiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Land in 5 versuchen erraten\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), quizState === \"generate\" ? /*#__PURE__*/_jsxDEV(InputField, {\n      action: startQuiz,\n      buttonLabel: \"Generieren\",\n      button: true,\n      input: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }, this) : quizState === \"guess\" ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"guessing\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"noch \", guesses, \" versuche\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"noValidInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        action: checkCountry,\n        inputLabel: \"Land eingeben:\",\n        placeholder: \"Enter drücken zur Tippabgabe\",\n        button: false,\n        input: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(GuessedCountrys, {\n        countrys: guessedCountrys,\n        countryToGuess: countryToGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(CountryQuiz, \"YiwKoUB6X0iemE1xojhaevsM3yw=\");\n_c = CountryQuiz;\nexport default CountryQuiz;\nvar _c;\n$RefreshReg$(_c, \"CountryQuiz\");","map":{"version":3,"names":["React","useState","axios","InputField","GuessedCountrys","jsxDEV","_jsxDEV","CountryQuiz","_s","apiUrl","quizState","setQuizState","countryToGuess","setCountryToGuess","guessedCountrys","setGuessedCountrys","allCountrys","setCountrys","guesses","setGuesses","callApi","res","get","formatApiCountryData","data","apiData","filteredData","forEach","item","_item$capital","_item$continents","push","translations","deu","common","population","capital","continents","area","keys","Object","length","Math","random","generateSessionStorage","country","window","sessionStorage","setItem","checkCountry","e","searchedCountry","alreadyGuessed","countrys","remainingGuesses","lastGuessed","getItem","allCountryNames","map","value","name","input","currentTarget","countryError","document","getElementById","key","preventDefault","includes","innerHTML","style","color","alert","filter","console","log","startQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","action","buttonLabel","button","id","inputLabel","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/tompi/Documents/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/CountryQuiz.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport InputField from './InputField';\r\nimport GuessedCountrys from './GuessedCountrys';\r\n\r\nconst CountryQuiz = () => {\r\n    const apiUrl = \"https://restcountries.com/v3.1/all\";\r\n    const [quizState, setQuizState] = useState(\"generate\");\r\n    const [countryToGuess, setCountryToGuess] = useState({});\r\n    const [guessedCountrys, setGuessedCountrys] = useState([]);\r\n    const [allCountrys, setCountrys] = useState([]);\r\n    const [guesses, setGuesses] = useState(5);\r\n\r\n    const callApi = async () => {\r\n        const res = await axios.get(apiUrl);\r\n        formatApiCountryData(res.data);\r\n    }\r\n\r\n    const formatApiCountryData = (apiData) => {\r\n        let filteredData = [];\r\n        apiData.forEach((item) => {\r\n            filteredData.push({\r\n                \"name\": item.translations.deu.common,\r\n                \"population\": item.population,\r\n                \"capital\": item.capital?.[0],\r\n                \"continent\": item.continents?.[0],\r\n                \"area\": item.area\r\n            })\r\n        })\r\n\r\n        setCountrys(filteredData);\r\n\r\n        var keys = Object.keys(filteredData);\r\n        setCountryToGuess(filteredData[keys[keys.length * Math.random() << 0]]);\r\n    }\r\n\r\n    const generateSessionStorage = (country) => {\r\n        window.sessionStorage.setItem(\"lastGuessed\", country)\r\n    }\r\n\r\n    const checkCountry = (e) => {\r\n        let searchedCountry = { ...countryToGuess }\r\n        let alreadyGuessed = [...guessedCountrys]\r\n        let countrys = [...allCountrys]\r\n        let remainingGuesses = guesses\r\n        let lastGuessed = window.sessionStorage.getItem(\"lastGuessed\");\r\n        let allCountryNames = countrys.map(value => value.name);\r\n        var input = e.currentTarget;\r\n        var countryError = document.getElementById(\"noValidInput\");\r\n\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (allCountryNames.includes(input.value) === false)  {\r\n\r\n                countryError.innerHTML = \"Bitte eingabe Überprüfen\";\r\n                countryError.style.color = \"red\";\r\n\r\n            } else if  (input.value === searchedCountry.name) {\r\n\r\n                alert(\"Glückwunsch das gesuchte Land war \"+searchedCountry.name)\r\n\r\n            } else {\r\n                \r\n                countryError.innerHTML = \"\";\r\n                countryError.style.color = \"black\";\r\n\r\n                alreadyGuessed = countrys.map(item => item.name === input.value ? item : \"\").filter(item === \"\")\r\n                console.log(alreadyGuessed);\r\n\r\n\r\n                /*countrys.forEach((countryitem) => {\r\n                    if (input.value === countryitem.name) {\r\n\r\n                        generateSessionStorage(countryitem.name);\r\n\r\n                        if (countryitem.name !== lastGuessed) {\r\n\r\n                            alreadyGuessed.push(countryitem);\r\n                            setGuesses(remainingGuesses - 1)\r\n                        }\r\n\r\n                        setGuessedCountrys(alreadyGuessed);\r\n\r\n                    }\r\n    \r\n                })*/\r\n            }\r\n        }\r\n    }\r\n    const startQuiz = (e) => {\r\n        e.preventDefault();\r\n        callApi();\r\n        setQuizState(\"guess\");\r\n    }\r\n\r\n    return (\r\n\r\n        <section className=\"countryQuiz\">\r\n            <header>\r\n                <h1>Land in 5 versuchen erraten</h1>\r\n            </header>\r\n            {quizState === \"generate\" ?\r\n                (\r\n                    <InputField\r\n                        action={startQuiz}\r\n                        buttonLabel={\"Generieren\"}\r\n                        button={true}\r\n                        input={false}\r\n\r\n                    ></InputField>\r\n                )\r\n\r\n                : quizState === \"guess\" ? (\r\n                    <section className='guessing'>\r\n\r\n                        <header>\r\n                            <h2>noch {guesses} versuche</h2>\r\n                        </header>\r\n\r\n                        <p id='noValidInput'></p>\r\n\r\n                        <InputField\r\n                            action={checkCountry}\r\n                            inputLabel={\"Land eingeben:\"}\r\n                            placeholder={\"Enter drücken zur Tippabgabe\"}\r\n                            button={false}\r\n                            input={true}\r\n                        ></InputField>\r\n\r\n                        <GuessedCountrys\r\n                            countrys={guessedCountrys}\r\n                            countryToGuess = {countryToGuess}\r\n                        ></GuessedCountrys>\r\n                    </section>\r\n                ) : \"\"\r\n            }\r\n\r\n        </section>\r\n    )\r\n}\r\nexport default CountryQuiz;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}