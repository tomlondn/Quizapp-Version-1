{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dokumente\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React-Projekte\\\\quizapp\\\\src\\\\components\\\\Million\\xE4rQuiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport UserNameQuiz from './UserNameQuiz';\nimport RandomQuizList from './RandomQuizList';\nimport axios from \"axios\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MillionärQuiz = () => {\n  _s();\n\n  const [quizState, setQuizState] = useState(\"name\");\n  const [allQuestions, setQuestions] = useState([]);\n  var dasistmeintest = \"huan\";\n\n  const changeQuizState = state => {\n    setQuizState(state);\n  };\n\n  const setUserName = event => {\n    sessionStorage.setItem(\"UsernameMillionär\", event.currentTarget.value);\n  };\n\n  const getUrl = difficulty => {\n    var url = \"https://the-trivia-api.com/api/questions?difficulty=\" + difficulty + \"&limit=5\";\n    return url;\n  };\n\n  const buildQuizQuestions = () => {\n    let Question = [];\n\n    const tess = async () => {\n      await Promise.all([getQuestionsBlock(getUrl(\"easy\")), getQuestionsBlock(getUrl(\"medium\")), getQuestionsBlock(getUrl(\"hard\"))]);\n    }; // tess.then(values => {\n    //   console.log(values)\n    // }).catch(error => {\n    //   console.log(error)\n    // })\n\n\n    getQuestionsBlock(getUrl(\"easy\")).then(value => {\n      console.log(value);\n    });\n  };\n\n  const getQuestionsBlock = async url => {\n    const res = await axios.get(url);\n    return res.data;\n  }; // const buildQuizQuestions = () => {\n  //   let Question = [];\n  //   // Question.push(getQuestionsBlock(\"easy\", getUrl(\"easy\"))).data;\n  //   // Question.push(getQuestionsBlock(\"medium\", getUrl(\"medium\"))).data;\n  //   // Question.push(getQuestionsBlock(\"hard\", getUrl(\"hard\"))).data;\n  //   console.log(getQuestionsBlock(getUrl(\"easy\")));\n  //   console.log(getQuestionsBlock(getUrl(\"medium\")));\n  //   console.log(getQuestionsBlock(getUrl(\"hard\")));\n  // }\n  // const getQuestionsBlock = async (url) => {\n  //   const res = await axios.get(url);\n  //   return res.data;\n  // }\n\n\n  const checkeNameSetState = event => {\n    event.preventDefault();\n    buildQuizQuestions();\n\n    if (sessionStorage.getItem(\"UsernameMillionär\")) {\n      changeQuizState(\"startet\");\n    } else {\n      alert(\"Bitte einen Namen eingeben!\");\n    }\n  };\n\n  const changeQuizScore = () => {\n    sessionStorage.setItem(\"Score\", parseInt(sessionStorage.getItem(\"Score\")) + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"million\\xE4rQuiz\",\n    children: quizState === \"name\" ? (sessionStorage.clear(), console.log(allQuestions), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Starte dein Quiz nach \\\"Wer Wird Million\\xE4r\\\" Art\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"15 Fragen - 5 Leichte - 5 Mittlere - 5 Schwere\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 62\n        }, this), \"Ein Fehler und das Quiz ist vorbei - 2 50/50 Joker\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(UserNameQuiz, {\n        setName: setUserName,\n        setStateCheckName: checkeNameSetState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }, this)) : quizState === \"startet\" ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"quizStarted\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(RandomQuizList, {\n        isMillionär: true,\n        allQuestions: allQuestions,\n        setState: changeQuizState,\n        changeScore: changeQuizScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MillionärQuiz, \"yrmPWz46yz3b/iBY3QGFkPDV2lc=\");\n\n_c = MillionärQuiz;\nexport default MillionärQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Million\\xE4rQuiz\");","map":{"version":3,"names":["React","useState","UserNameQuiz","RandomQuizList","axios","Question","MillionärQuiz","quizState","setQuizState","allQuestions","setQuestions","dasistmeintest","changeQuizState","state","setUserName","event","sessionStorage","setItem","currentTarget","value","getUrl","difficulty","url","buildQuizQuestions","tess","Promise","all","getQuestionsBlock","then","console","log","res","get","data","checkeNameSetState","preventDefault","getItem","alert","changeQuizScore","parseInt","clear"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/MillionärQuiz.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport UserNameQuiz from './UserNameQuiz';\r\nimport RandomQuizList from './RandomQuizList';\r\nimport axios from \"axios\";\r\nimport Question from \"./Question\";\r\n\r\nconst MillionärQuiz = () => {\r\n  const [quizState, setQuizState] = useState(\"name\");\r\n  const [allQuestions, setQuestions] = useState([]);\r\n\r\n\r\n  var dasistmeintest = \"huan\";\r\n\r\n  const changeQuizState = (state) => {\r\n    setQuizState(state);\r\n  }\r\n\r\n  const setUserName = (event) => {\r\n    sessionStorage.setItem(\"UsernameMillionär\", event.currentTarget.value)\r\n  }\r\n\r\n  const getUrl = (difficulty) => {\r\n    var url = \"https://the-trivia-api.com/api/questions?difficulty=\" + difficulty + \"&limit=5\";\r\n    return url\r\n  }\r\n\r\nconst buildQuizQuestions = () => {\r\n    let Question = [];\r\n   \r\n\r\n    const tess = async () => {\r\n      await Promise.all([getQuestionsBlock(getUrl(\"easy\")), getQuestionsBlock(getUrl(\"medium\")), getQuestionsBlock(getUrl(\"hard\")) ])\r\n    }\r\n    \r\n    // tess.then(values => {\r\n    //   console.log(values)\r\n    // }).catch(error => {\r\n    //   console.log(error)\r\n    // })\r\n    getQuestionsBlock(getUrl(\"easy\")).then((value) => {\r\n      console.log(value);\r\n    }\r\n    );\r\n\r\n  }\r\n\r\n  const getQuestionsBlock = async (url) => {\r\n    const res = await axios.get(url);\r\n\r\n    return res.data;\r\n  }\r\n\r\n  \r\n  // const buildQuizQuestions = () => {\r\n  //   let Question = [];\r\n\r\n  //   // Question.push(getQuestionsBlock(\"easy\", getUrl(\"easy\"))).data;\r\n  //   // Question.push(getQuestionsBlock(\"medium\", getUrl(\"medium\"))).data;\r\n  //   // Question.push(getQuestionsBlock(\"hard\", getUrl(\"hard\"))).data;\r\n   \r\n  //   console.log(getQuestionsBlock(getUrl(\"easy\")));\r\n  //   console.log(getQuestionsBlock(getUrl(\"medium\")));\r\n  //   console.log(getQuestionsBlock(getUrl(\"hard\")));\r\n\r\n  // }\r\n\r\n  // const getQuestionsBlock = async (url) => {\r\n  //   const res = await axios.get(url);\r\n\r\n  //   return res.data;\r\n  // }\r\n\r\n  const checkeNameSetState = (event) => {\r\n    event.preventDefault();\r\n    buildQuizQuestions();\r\n\r\n    if (sessionStorage.getItem(\"UsernameMillionär\")) {\r\n      changeQuizState(\"startet\");\r\n\r\n    } else {\r\n      alert(\"Bitte einen Namen eingeben!\");\r\n    }\r\n  }\r\n\r\n  const changeQuizScore = () => {\r\n    sessionStorage.setItem(\"Score\", parseInt(sessionStorage.getItem(\"Score\")) + 1);\r\n  }\r\n\r\n  return (\r\n    <section className=\"millionärQuiz\">\r\n\r\n      {quizState === \"name\" ?\r\n        (\r\n          sessionStorage.clear(),\r\n          console.log(allQuestions),\r\n\r\n          <section>\r\n            <header>\r\n              <h1>Starte dein Quiz nach \"Wer Wird Millionär\" Art</h1>\r\n            </header>\r\n            <p>15 Fragen - 5 Leichte - 5 Mittlere - 5 Schwere<br />\r\n              Ein Fehler und das Quiz ist vorbei - 2 50/50 Joker\r\n            </p>\r\n\r\n            <UserNameQuiz\r\n              setName={setUserName}\r\n              setStateCheckName={checkeNameSetState}\r\n            ></UserNameQuiz>\r\n          </section>\r\n        ) : quizState === \"startet\" ?\r\n          (\r\n\r\n            <section className=\"quizStarted\">\r\n              <header>\r\n                <h1>Quiz</h1>\r\n              </header>\r\n\r\n              <RandomQuizList\r\n                isMillionär={true}\r\n                allQuestions={allQuestions}\r\n                setState={changeQuizState}\r\n                changeScore={changeQuizScore}\r\n              ></RandomQuizList>\r\n            </section>\r\n\r\n          ) : ''\r\n      }\r\n    </section>\r\n  )\r\n}\r\nexport default MillionärQuiz"],"mappings":"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"},"metadata":{},"sourceType":"module"}