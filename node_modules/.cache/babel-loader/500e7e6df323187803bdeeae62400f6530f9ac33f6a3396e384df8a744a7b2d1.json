{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dokumente\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React-Projekte\\\\quizapp\\\\src\\\\components\\\\RandomQuizList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Question from './Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomQuizList = _ref => {\n  _s();\n  let {\n    allQuestions,\n    setState,\n    changeScore,\n    isMillionär\n  } = _ref;\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const checkAnswer = event => {\n    var answerPossibilities = document.getElementsByClassName(event.currentTarget.className);\n    for (var answerPossibilitie of answerPossibilities) {\n      if (answerPossibilitie.getAttribute(\"correct\") === \"yes\") {\n        var correctAnswer = answerPossibilitie;\n      }\n    }\n    if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\n      event.currentTarget.style.backgroundColor = \"green\";\n      event.currentTarget.style.color = \"white\";\n      changeScore();\n    } else {\n      correctAnswer.className = correctAnswer.className + \" blinking\";\n      event.currentTarget.style.backgroundColor = \"red\";\n      event.currentTarget.style.color = \"white\";\n      if (isMillionär) {\n        setState(\"score\");\n      }\n    }\n    setTimeout(nextQuestion, 2000);\n  };\n  const nextQuestion = () => {\n    if (currentQuestion === allQuestions.length - 1) {\n      setState(\"score\");\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"quizList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Question \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"actualQuestionPosition\",\n        children: currentQuestion < allQuestions.length ? currentQuestion + 1 : currentQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 27\n      }, this), \" of \", allQuestions.length, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), allQuestions.map((item, index) => {\n      if (index === currentQuestion) {\n        return /*#__PURE__*/_jsxDEV(Question, {\n          questionIndex: index,\n          questionName: item.question,\n          correctAnswer: item.correctAnswer,\n          incorrectAnswers: item.incorrectAnswers,\n          checkAnswer: checkAnswer,\n          changeQuestion: nextQuestion\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this);\n      } else {\n        return '';\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(RandomQuizList, \"9OM438k1WhEIHDwFF7YsuyU6VEk=\");\n_c = RandomQuizList;\nexport default RandomQuizList;\nvar _c;\n$RefreshReg$(_c, \"RandomQuizList\");","map":{"version":3,"names":["React","useState","Question","jsxDEV","_jsxDEV","RandomQuizList","_ref","_s","allQuestions","setState","changeScore","isMillionär","currentQuestion","setCurrentQuestion","checkAnswer","event","answerPossibilities","document","getElementsByClassName","currentTarget","className","answerPossibilitie","getAttribute","correctAnswer","style","backgroundColor","color","setTimeout","nextQuestion","length","children","id","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","questionIndex","questionName","question","incorrectAnswers","changeQuestion","_c","$RefreshReg$"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/RandomQuizList.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Question from './Question'\r\n\r\nconst RandomQuizList = ({ allQuestions, setState, changeScore, isMillionär }) => {\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n\r\n    const checkAnswer = (event) => {\r\n        var answerPossibilities = document.getElementsByClassName(event.currentTarget.className);\r\n\r\n        for (var answerPossibilitie of answerPossibilities) {\r\n            if (answerPossibilitie.getAttribute(\"correct\") === \"yes\") {\r\n                var correctAnswer = answerPossibilitie;\r\n            }\r\n        }\r\n\r\n        if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\r\n\r\n            event.currentTarget.style.backgroundColor = \"green\";\r\n            event.currentTarget.style.color = \"white\";\r\n\r\n            changeScore();\r\n\r\n        } else {\r\n            correctAnswer.className = correctAnswer.className + \" blinking\"\r\n\r\n            event.currentTarget.style.backgroundColor = \"red\";\r\n            event.currentTarget.style.color = \"white\";\r\n\r\n            if(isMillionär){\r\n                setState(\"score\");\r\n            }\r\n\r\n        }\r\n\r\n        setTimeout(nextQuestion, 2000);\r\n    }\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestion === allQuestions.length - 1) {\r\n            setState(\"score\");\r\n        } else {\r\n            setCurrentQuestion(currentQuestion + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section className='quizList'>\r\n            <div>Question <span id=\"actualQuestionPosition\">{(currentQuestion < allQuestions.length) ? currentQuestion + 1 : currentQuestion}</span> of {allQuestions.length} </div>\r\n            {allQuestions.map((item, index) => {\r\n                if (index === currentQuestion) {\r\n                    return (\r\n                        <Question\r\n                            key={index}\r\n                            questionIndex={index}\r\n                            questionName={item.question}\r\n                            correctAnswer={item.correctAnswer}\r\n                            incorrectAnswers={item.incorrectAnswers}\r\n                            checkAnswer={checkAnswer}\r\n                            changeQuestion={nextQuestion}\r\n                        ></Question>\r\n                    )\r\n                } else {\r\n                    return ('');\r\n                }\r\n            })}\r\n        </section>\r\n    )\r\n}\r\nexport default RandomQuizList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}