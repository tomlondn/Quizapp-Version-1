{"ast":null,"code":"import _toConsumableArray from\"C:/Users/tompi/Documents/Programmier\\xFCbungen/\\xDCbung JS/React-Projekte/quizapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/tompi/Documents/Programmier\\xFCbungen/\\xDCbung JS/React-Projekte/quizapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/Users/tompi/Documents/Programmier\\xFCbungen/\\xDCbung JS/React-Projekte/quizapp/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/tompi/Documents/Programmier\\xFCbungen/\\xDCbung JS/React-Projekte/quizapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/tompi/Documents/Programmier\\xFCbungen/\\xDCbung JS/React-Projekte/quizapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import axios from'axios';import InputField from'./InputField';import GuessedCountrys from'./GuessedCountrys';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CountryQuiz=function CountryQuiz(){var apiUrl=\"https://restcountries.com/v3.1/all\";var _useState=useState(\"generate\"),_useState2=_slicedToArray(_useState,2),quizState=_useState2[0],setQuizState=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),countryToGuess=_useState4[0],setCountryToGuess=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),guessedCountrys=_useState6[0],setGuessedCountrys=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),allCountrys=_useState8[0],setCountrys=_useState8[1];var _useState9=useState(5),_useState10=_slicedToArray(_useState9,2),guesses=_useState10[0],setGuesses=_useState10[1];var callApi=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var res;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(apiUrl);case 2:res=_context.sent;formatApiCountryData(res.data);case 4:case\"end\":return _context.stop();}},_callee);}));return function callApi(){return _ref.apply(this,arguments);};}();var formatApiCountryData=function formatApiCountryData(apiData){var filteredData=[];apiData.forEach(function(item){var _item$capital,_item$continents;filteredData.push({\"name\":item.translations.deu.common,\"population\":item.population,\"capital\":(_item$capital=item.capital)===null||_item$capital===void 0?void 0:_item$capital[0],\"continent\":(_item$continents=item.continents)===null||_item$continents===void 0?void 0:_item$continents[0],\"area\":item.area});});setCountrys(filteredData);var keys=Object.keys(filteredData);setCountryToGuess(filteredData[keys[keys.length*Math.random()<<0]]);};var generateSessionStorage=function generateSessionStorage(country){window.sessionStorage.setItem(\"lastGuessed\",country);};var checkCountry=function checkCountry(e){var searchedCountry=_objectSpread({},countryToGuess);var alreadyGuessed=_toConsumableArray(guessedCountrys);var countrys=_toConsumableArray(allCountrys);var remainingGuesses=guesses;var lastGuessed=window.sessionStorage.getItem(\"lastGuessed\");var allCountryNames=countrys.map(function(value){return value.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\");});var input=e.currentTarget.value.toLowerCase();var countryError=document.getElementById(\"noValidInput\");if(e.key===\"Enter\"){e.preventDefault();if(allCountryNames.includes(input)===false){countryError.innerHTML=\"Bitte eingabe Überprüfen\";countryError.style.color=\"red\";}else if(input.value===searchedCountry.name){alert(\"Glückwunsch das gesuchte Land war \"+searchedCountry.name);}else{countryError.innerHTML=\"\";countryError.style.color=\"black\";generateSessionStorage(input);if(input!==lastGuessed){alreadyGuessed.push(countrys.find(function(item){return item.name.toLowerCase()===input;}));setGuessedCountrys(alreadyGuessed);setGuesses(remainingGuesses-1);}}}};var startQuiz=function startQuiz(e){e.preventDefault();callApi();setQuizState(\"guess\");};return/*#__PURE__*/_jsxs(\"section\",{className:\"countryQuiz\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"h1\",{children:\"Land in 5 versuchen erraten\"})}),quizState===\"generate\"?/*#__PURE__*/_jsx(InputField,{action:startQuiz,buttonLabel:\"Generieren\",button:true,input:false}):quizState===\"guess\"?/*#__PURE__*/_jsxs(\"section\",{className:\"guessing\",children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsxs(\"h2\",{children:[\"noch \",guesses,\" versuche\"]})}),/*#__PURE__*/_jsx(\"p\",{id:\"noValidInput\"}),/*#__PURE__*/_jsx(InputField,{action:checkCountry,inputLabel:\"Land eingeben:\",placeholder:\"Enter drücken zur Tippabgabe\",button:false,input:true}),/*#__PURE__*/_jsx(GuessedCountrys,{countrys:guessedCountrys,countryToGuess:countryToGuess})]}):\"\"]});};export default CountryQuiz;","map":{"version":3,"names":["React","useState","axios","InputField","GuessedCountrys","jsx","_jsx","jsxs","_jsxs","CountryQuiz","apiUrl","_useState","_useState2","_slicedToArray","quizState","setQuizState","_useState3","_useState4","countryToGuess","setCountryToGuess","_useState5","_useState6","guessedCountrys","setGuessedCountrys","_useState7","_useState8","allCountrys","setCountrys","_useState9","_useState10","guesses","setGuesses","callApi","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","get","sent","formatApiCountryData","data","stop","apply","arguments","apiData","filteredData","forEach","item","_item$capital","_item$continents","push","translations","deu","common","population","capital","continents","area","keys","Object","length","Math","random","generateSessionStorage","country","window","sessionStorage","setItem","checkCountry","e","searchedCountry","_objectSpread","alreadyGuessed","_toConsumableArray","countrys","remainingGuesses","lastGuessed","getItem","allCountryNames","map","value","name","toLowerCase","normalize","replace","input","currentTarget","countryError","document","getElementById","key","preventDefault","includes","innerHTML","style","color","alert","find","startQuiz","className","children","action","buttonLabel","button","id","inputLabel","placeholder"],"sources":["C:/Users/tompi/Documents/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/CountryQuiz.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport axios from 'axios'\r\nimport InputField from './InputField';\r\nimport GuessedCountrys from './GuessedCountrys';\r\n\r\nconst CountryQuiz = () => {\r\n    const apiUrl = \"https://restcountries.com/v3.1/all\";\r\n    const [quizState, setQuizState] = useState(\"generate\");\r\n    const [countryToGuess, setCountryToGuess] = useState({});\r\n    const [guessedCountrys, setGuessedCountrys] = useState([]);\r\n    const [allCountrys, setCountrys] = useState([]);\r\n    const [guesses, setGuesses] = useState(5);\r\n\r\n    const callApi = async () => {\r\n        const res = await axios.get(apiUrl);\r\n        formatApiCountryData(res.data);\r\n    }\r\n\r\n    const formatApiCountryData = (apiData) => {\r\n        let filteredData = [];\r\n        apiData.forEach((item) => {\r\n            filteredData.push({\r\n                \"name\": item.translations.deu.common,\r\n                \"population\": item.population,\r\n                \"capital\": item.capital?.[0],\r\n                \"continent\": item.continents?.[0],\r\n                \"area\": item.area\r\n            })\r\n        })\r\n\r\n        setCountrys(filteredData);\r\n\r\n        var keys = Object.keys(filteredData);\r\n        setCountryToGuess(filteredData[keys[keys.length * Math.random() << 0]]);\r\n    }\r\n\r\n    const generateSessionStorage = (country) => {\r\n        window.sessionStorage.setItem(\"lastGuessed\", country)\r\n    }\r\n\r\n    const checkCountry = (e) => {\r\n        const searchedCountry = { ...countryToGuess }\r\n        const alreadyGuessed = [...guessedCountrys]\r\n        const countrys = [...allCountrys]\r\n        const remainingGuesses = guesses\r\n        const lastGuessed = window.sessionStorage.getItem(\"lastGuessed\");\r\n        const allCountryNames = countrys.map(value => value.name.toLowerCase().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\"));\r\n        const input = e.currentTarget.value.toLowerCase();\r\n        const countryError = document.getElementById(\"noValidInput\");\r\n\r\n\r\n        if (e.key === \"Enter\") {\r\n            e.preventDefault();\r\n\r\n            if (allCountryNames.includes(input) === false)  {\r\n\r\n                countryError.innerHTML = \"Bitte eingabe Überprüfen\";\r\n                countryError.style.color = \"red\";\r\n\r\n            } else if  (input.value === searchedCountry.name) {\r\n\r\n                alert(\"Glückwunsch das gesuchte Land war \"+searchedCountry.name)\r\n\r\n            } else {\r\n                \r\n                countryError.innerHTML = \"\";\r\n                countryError.style.color = \"black\";\r\n\r\n                generateSessionStorage(input);\r\n\r\n\r\n                if (input !== lastGuessed) {\r\n\r\n                    alreadyGuessed.push(countrys.find(item => item.name.toLowerCase() === input));\r\n                    setGuessedCountrys(alreadyGuessed);\r\n                    setGuesses(remainingGuesses - 1)\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    const startQuiz = (e) => {\r\n        e.preventDefault();\r\n        callApi();\r\n        setQuizState(\"guess\");\r\n    }\r\n\r\n    return (\r\n\r\n        <section className=\"countryQuiz\">\r\n            <header>\r\n                <h1>Land in 5 versuchen erraten</h1>\r\n            </header>\r\n            {quizState === \"generate\" ?\r\n                (\r\n                    <InputField\r\n                        action={startQuiz}\r\n                        buttonLabel={\"Generieren\"}\r\n                        button={true}\r\n                        input={false}\r\n\r\n                    ></InputField>\r\n                )\r\n\r\n                : quizState === \"guess\" ? (\r\n                    <section className='guessing'>\r\n\r\n                        <header>\r\n                            <h2>noch {guesses} versuche</h2>\r\n                        </header>\r\n\r\n                        <p id='noValidInput'></p>\r\n\r\n                        <InputField\r\n                            action={checkCountry}\r\n                            inputLabel={\"Land eingeben:\"}\r\n                            placeholder={\"Enter drücken zur Tippabgabe\"}\r\n                            button={false}\r\n                            input={true}\r\n                        ></InputField>\r\n\r\n                        <GuessedCountrys\r\n                            countrys={guessedCountrys}\r\n                            countryToGuess = {countryToGuess}\r\n                        ></GuessedCountrys>\r\n                    </section>\r\n                ) : \"\"\r\n            }\r\n\r\n        </section>\r\n    )\r\n}\r\nexport default CountryQuiz;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}