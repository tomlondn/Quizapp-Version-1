{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dokumente\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React\\xDCbung\\\\quizapp\\\\src\\\\components\\\\RandomQuizList.js\";\nimport React from 'react';\nimport Question from './Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RandomQuizList = _ref => {\n  let {\n    allQuestions\n  } = _ref;\n\n  const checkAnswer = event => {\n    var questionPosition = document.getElementById(\"actualQuestionPosition\").innerHTML;\n    changeQuestion(questionPosition);\n\n    if (questionPosition < allQuestions.length) {\n      document.getElementById(\"actualQuestionPosition\").innerHTML = parseInt(questionPosition) + 1;\n    }\n\n    if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\n      event.currentTarget.style.backgroundColor = \"green\";\n      event.currentTarget.style.color = \"white\";\n    } else {\n      event.currentTarget.style.backgroundColor = \"red\";\n      event.currentTarget.style.color = \"white\";\n    }\n  };\n\n  const changeQuestion = function () {\n    let questionPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let questions = arguments.length > 1 ? arguments[1] : undefined;\n    // console.log(questions[questionPosition])\n    console.log(questions[0]); // return (\n    //     <Question\n    //         questionName={questions[questionPosition].question}\n    //         correctAnswer={questions[questionPosition].correctAnswer}\n    //         incorrectAnswers={questions[questionPosition].incorrectAnswers}\n    //         checkAnswer={checkAnswer}\n    //     ></Question>\n    // )\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"quizList\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Question \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"actualQuestionPosition\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 27\n      }, this), \" of \", allQuestions.length, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), changeQuestion(allQuestions)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_c = RandomQuizList;\nexport default RandomQuizList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomQuizList\");","map":{"version":3,"names":["React","Question","RandomQuizList","allQuestions","checkAnswer","event","questionPosition","document","getElementById","innerHTML","changeQuestion","length","parseInt","currentTarget","getAttribute","style","backgroundColor","color","questions","console","log"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/ReactÜbung/quizapp/src/components/RandomQuizList.js"],"sourcesContent":["import React from 'react'\r\nimport Question from './Question'\r\n\r\nconst RandomQuizList = ({ allQuestions }) => {\r\n\r\n    const checkAnswer = (event) => {\r\n        var questionPosition = document.getElementById(\"actualQuestionPosition\").innerHTML;\r\n\r\n        changeQuestion(questionPosition);\r\n\r\n        if (questionPosition < allQuestions.length) {\r\n            document.getElementById(\"actualQuestionPosition\").innerHTML = parseInt(questionPosition) + 1;\r\n        }\r\n\r\n        if (event.currentTarget.getAttribute(\"correct\") === \"yes\") {\r\n            event.currentTarget.style.backgroundColor = \"green\";\r\n            event.currentTarget.style.color = \"white\";\r\n\r\n        } else {\r\n            event.currentTarget.style.backgroundColor = \"red\";\r\n            event.currentTarget.style.color = \"white\";\r\n        }\r\n    };\r\n    const changeQuestion = (questionPosition = 0, questions) => {\r\n        // console.log(questions[questionPosition])\r\n        console.log(questions[0])\r\n\r\n        // return (\r\n        //     <Question\r\n        //         questionName={questions[questionPosition].question}\r\n        //         correctAnswer={questions[questionPosition].correctAnswer}\r\n        //         incorrectAnswers={questions[questionPosition].incorrectAnswers}\r\n        //         checkAnswer={checkAnswer}\r\n        //     ></Question>\r\n        // )\r\n    }\r\n\r\n    return (\r\n        <section className='quizList'>\r\n            <div>Question <span id=\"actualQuestionPosition\">1</span> of {allQuestions.length} </div>\r\n            {/* {allQuestions.map((item, index) => { */}\r\n            {changeQuestion(allQuestions)}\r\n               \r\n            {/* })} */}\r\n        </section>\r\n    )\r\n}\r\nexport default RandomQuizList"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,cAAc,GAAG,QAAsB;EAAA,IAArB;IAAEC;EAAF,CAAqB;;EAEzC,MAAMC,WAAW,GAAIC,KAAD,IAAW;IAC3B,IAAIC,gBAAgB,GAAGC,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,EAAkDC,SAAzE;IAEAC,cAAc,CAACJ,gBAAD,CAAd;;IAEA,IAAIA,gBAAgB,GAAGH,YAAY,CAACQ,MAApC,EAA4C;MACxCJ,QAAQ,CAACC,cAAT,CAAwB,wBAAxB,EAAkDC,SAAlD,GAA8DG,QAAQ,CAACN,gBAAD,CAAR,GAA6B,CAA3F;IACH;;IAED,IAAID,KAAK,CAACQ,aAAN,CAAoBC,YAApB,CAAiC,SAAjC,MAAgD,KAApD,EAA2D;MACvDT,KAAK,CAACQ,aAAN,CAAoBE,KAApB,CAA0BC,eAA1B,GAA4C,OAA5C;MACAX,KAAK,CAACQ,aAAN,CAAoBE,KAApB,CAA0BE,KAA1B,GAAkC,OAAlC;IAEH,CAJD,MAIO;MACHZ,KAAK,CAACQ,aAAN,CAAoBE,KAApB,CAA0BC,eAA1B,GAA4C,KAA5C;MACAX,KAAK,CAACQ,aAAN,CAAoBE,KAApB,CAA0BE,KAA1B,GAAkC,OAAlC;IACH;EACJ,CAjBD;;EAkBA,MAAMP,cAAc,GAAG,YAAqC;IAAA,IAApCJ,gBAAoC,uEAAjB,CAAiB;IAAA,IAAdY,SAAc;IACxD;IACAC,OAAO,CAACC,GAAR,CAAYF,SAAS,CAAC,CAAD,CAArB,EAFwD,CAIxD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAZD;;EAcA,oBACI;IAAS,SAAS,EAAC,UAAnB;IAAA,wBACI;MAAA,qCAAc;QAAM,EAAE,EAAC,wBAAT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAd,UAA6Df,YAAY,CAACQ,MAA1E;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAGKD,cAAc,CAACP,YAAD,CAHnB;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AASH,CA3CD;;KAAMD,c;AA4CN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}