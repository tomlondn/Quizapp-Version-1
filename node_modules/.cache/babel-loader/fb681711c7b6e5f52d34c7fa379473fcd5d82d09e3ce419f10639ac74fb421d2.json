{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dokumente\\\\Programmier\\xFCbungen\\\\\\xDCbung JS\\\\React-Projekte\\\\quizapp\\\\src\\\\components\\\\RandomQuizGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport QuestionCategorys from './QuestionCategorys';\nimport QuestionDifficultys from './QuestionDifficultys';\nimport axios from \"axios\";\nimport QuestionCount from \"./QuestionCount\";\nimport RandomQuizList from \"./RandomQuizList\";\nimport UserNameQuiz from \"./UserNameQuiz\";\nimport QuizScore from \"./QuizScore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomQuizGenerator = () => {\n  _s();\n  const catApiurl = \"https://the-trivia-api.com/api/categories\";\n  const allDifficultys = [{\n    active: null,\n    difficulty: 'Easy'\n  }, {\n    active: null,\n    difficulty: 'Medium'\n  }, {\n    active: null,\n    difficulty: 'Hard'\n  }];\n  const baseQuizConfig = {\n    difficulty: null,\n    categorie: null,\n    count: null\n  };\n  const [categories, setCategories] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [difficultys, setDifficulty] = useState(allDifficultys);\n  const [quizConfig, setQuizConfig] = useState(baseQuizConfig);\n  const [quizState, setQuizState] = useState(\"name\");\n  const [questions, setQuestions] = useState([]);\n  const getCategorieArrayObjext = cats => {\n    let newCatOby = [];\n    cats.forEach(item => {\n      newCatOby.push({\n        active: null,\n        categorie: item\n      });\n    });\n    return newCatOby;\n  };\n  const formatCat = cat => {\n    cat = cat.replaceAll(\" \", \"_\");\n    cat = cat.replace(\"&\", \"and\");\n    console.log(cat);\n    return cat;\n  };\n  const getCategory = index => {\n    let quizCategorys = [...categories];\n    console.log(quizCategorys);\n    let newQuizConfig = {\n      ...quizConfig\n    };\n    quizCategorys.forEach(item => {\n      item.active = false;\n    });\n    quizCategorys[index].active = true;\n    setCategories(quizCategorys);\n    newQuizConfig.categorie = quizCategorys[index].categorie;\n    setQuizConfig(newQuizConfig);\n  };\n  const getDifficulty = index => {\n    let quizDifficultys = [...difficultys];\n    let newQuizConfig = {\n      ...quizConfig\n    };\n    quizDifficultys.forEach(item => {\n      item.active = false;\n    });\n    quizDifficultys[index].active = true;\n    setDifficulty(quizDifficultys);\n    newQuizConfig.difficulty = quizDifficultys[index].difficulty;\n    setQuizConfig(newQuizConfig);\n  };\n  const getQuestionCount = event => {\n    var count = event.currentTarget.value;\n    var min = event.currentTarget.min;\n    var max = event.currentTarget.max;\n    let newQuizConfig = {\n      ...quizConfig\n    };\n    if (count >= min && count <= max) {\n      newQuizConfig.count = count;\n    } else {\n      newQuizConfig.count = null;\n    }\n    setQuizConfig(newQuizConfig);\n  };\n  const getQuizConfig = event => {\n    event.preventDefault();\n    if (quizConfig.categorie === null) {\n      alert(\"Bitte Kategorie auswählen\");\n    } else if (quizConfig.difficulty === null) {\n      alert(\"Bitte Schwierigkeit auswählen\");\n    } else if (!quizConfig.count) {\n      alert(\"Bitte (gültige)Fragemenge eingeben\");\n    }\n    if (quizConfig.categorie != null & !!quizConfig.count & quizConfig.difficulty != null) {\n      var newApiUrl = \"https://the-trivia-api.com/api/questions?categories=\" + formatCat(quizConfig.categorie).toLowerCase() + \"&limit=\" + quizConfig.count + \"&difficulty=\" + quizConfig.difficulty.toLowerCase();\n      setQuizState(\"startet\");\n      getQuestions(newApiUrl);\n    }\n  };\n  const checkeNameSetState = event => {\n    event.preventDefault();\n    if (sessionStorage.getItem(\"Username\")) {\n      changeQuizState(\"config\");\n    } else {\n      alert(\"Bitte einen Namen eingeben!\");\n    }\n  };\n  const setUserName = event => {\n    sessionStorage.setItem(\"Username\", event.currentTarget.value);\n  };\n  const changeQuizScore = () => {\n    sessionStorage.setItem(\"Score\", parseInt(sessionStorage.getItem(\"Score\")) + 1);\n  };\n  const changeQuizState = state => {\n    setQuizState(state);\n  };\n  const getQuestions = async url => {\n    const res = await axios.get(url);\n    setQuestions(res.data);\n  };\n  useEffect(() => {\n    const getCartgories = async () => {\n      const res = await axios.get(catApiurl);\n      setCategories(getCategorieArrayObjext(Object.keys(res.data)));\n      setLoading(false);\n    };\n    getCartgories();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Wait for Api...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this) : quizState === \"name\" ? (sessionStorage.clear(), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"takeName\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Erstelle dein Random Quiz Schritt 1 von 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(UserNameQuiz, {\n        setName: setUserName,\n        setStateCheckName: checkeNameSetState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)) : quizState === \"config\" ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"quizConfig\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Erstelle dein Random Quiz Schritt 2 von 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCategorys, {\n        setCategorie: getCategory,\n        categories: categories\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(QuestionDifficultys, {\n        setDifficulty: getDifficulty,\n        difficultys: difficultys\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(QuestionCount, {\n        setCount: getQuestionCount,\n        startQuiz: getQuizConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this) : quizState === \"startet\" ? (sessionStorage.setItem(\"Score\", 0), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"quizStartet\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Quiz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Schwierigkeit: \", quizConfig.difficulty, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Kategorie: \", quizConfig.categorie]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(RandomQuizList, {\n        allQuestions: questions,\n        setState: changeQuizState,\n        changeScore: changeQuizScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: () => setQuizState(\"config\"),\n        className: \" button\",\n        children: \"Zur\\xFCck zur Quiz-Konfig\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(QuizScore, {\n      quizConfig: quizConfig,\n      setQuizState: setQuizState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(RandomQuizGenerator, \"VUTvK+v/AaGoi6K5KgBT4dhE4kQ=\");\n_c = RandomQuizGenerator;\nexport default RandomQuizGenerator;\nvar _c;\n$RefreshReg$(_c, \"RandomQuizGenerator\");","map":{"version":3,"names":["React","useEffect","useState","QuestionCategorys","QuestionDifficultys","axios","QuestionCount","RandomQuizList","UserNameQuiz","QuizScore","jsxDEV","_jsxDEV","RandomQuizGenerator","_s","catApiurl","allDifficultys","active","difficulty","baseQuizConfig","categorie","count","categories","setCategories","loading","setLoading","difficultys","setDifficulty","quizConfig","setQuizConfig","quizState","setQuizState","questions","setQuestions","getCategorieArrayObjext","cats","newCatOby","forEach","item","push","formatCat","cat","replaceAll","replace","console","log","getCategory","index","quizCategorys","newQuizConfig","getDifficulty","quizDifficultys","getQuestionCount","event","currentTarget","value","min","max","getQuizConfig","preventDefault","alert","newApiUrl","toLowerCase","getQuestions","checkeNameSetState","sessionStorage","getItem","changeQuizState","setUserName","setItem","changeQuizScore","parseInt","state","url","res","get","data","getCartgories","Object","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","clear","className","setName","setStateCheckName","setCategorie","setCount","startQuiz","allQuestions","setState","changeScore","onClick","_c","$RefreshReg$"],"sources":["D:/Dokumente/Programmierübungen/Übung JS/React-Projekte/quizapp/src/components/RandomQuizGenerator.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport QuestionCategorys from './QuestionCategorys'\r\nimport QuestionDifficultys from './QuestionDifficultys'\r\nimport axios from \"axios\";\r\nimport QuestionCount from \"./QuestionCount\";\r\nimport RandomQuizList from \"./RandomQuizList\";\r\nimport UserNameQuiz from \"./UserNameQuiz\";\r\nimport QuizScore from \"./QuizScore\";\r\n\r\n\r\nconst RandomQuizGenerator = () => {\r\n  const catApiurl = \"https://the-trivia-api.com/api/categories\";\r\n  const allDifficultys = [\r\n    { active: null, difficulty: 'Easy' },\r\n    { active: null, difficulty: 'Medium' },\r\n    { active: null, difficulty: 'Hard' }\r\n  ];\r\n\r\n  const baseQuizConfig = {\r\n    difficulty: null,\r\n    categorie: null,\r\n    count: null\r\n  };\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [difficultys, setDifficulty] = useState(allDifficultys);\r\n  const [quizConfig, setQuizConfig] = useState(baseQuizConfig);\r\n  const [quizState, setQuizState] = useState(\"name\");\r\n  const [questions, setQuestions] = useState([]);\r\n\r\n  const getCategorieArrayObjext = (cats) => {\r\n    let newCatOby = [];\r\n\r\n    cats.forEach(item => {\r\n      newCatOby.push({ active: null, categorie: item })\r\n    })\r\n    return newCatOby;\r\n  }\r\n  const formatCat = (cat) => {\r\n    cat = cat.replaceAll(\" \", \"_\");\r\n    cat = cat.replace(\"&\", \"and\");\r\n    console.log(cat);\r\n\r\n    return cat;\r\n  }\r\n  const getCategory = (index) => {\r\n    let quizCategorys = [...categories];\r\n    console.log(quizCategorys);\r\n    let newQuizConfig = { ...quizConfig };\r\n\r\n    quizCategorys.forEach(item => {\r\n      item.active = false;\r\n    })\r\n    quizCategorys[index].active = true;\r\n\r\n    setCategories(quizCategorys);\r\n\r\n    newQuizConfig.categorie = quizCategorys[index].categorie;\r\n\r\n    setQuizConfig(newQuizConfig);\r\n\r\n  }\r\n  const getDifficulty = (index) => {\r\n    let quizDifficultys = [...difficultys];\r\n    let newQuizConfig = { ...quizConfig };\r\n\r\n    quizDifficultys.forEach(item => {\r\n      item.active = false;\r\n    })\r\n    quizDifficultys[index].active = true;\r\n\r\n    setDifficulty(quizDifficultys);\r\n\r\n    newQuizConfig.difficulty = quizDifficultys[index].difficulty;\r\n    setQuizConfig(newQuizConfig);\r\n\r\n  }\r\n  const getQuestionCount = (event) => {\r\n    var count = event.currentTarget.value;\r\n    var min = event.currentTarget.min;\r\n    var max = event.currentTarget.max;\r\n    let newQuizConfig = { ...quizConfig };\r\n\r\n    if ((count >= min) && (count <= max)) {\r\n      newQuizConfig.count = count;\r\n    } else {\r\n      newQuizConfig.count = null;\r\n    }\r\n    setQuizConfig(newQuizConfig);\r\n  }\r\n\r\n  const getQuizConfig = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (quizConfig.categorie === null) {\r\n      alert(\"Bitte Kategorie auswählen\");\r\n    } else if (quizConfig.difficulty === null) {\r\n      alert(\"Bitte Schwierigkeit auswählen\");\r\n    } else if (!quizConfig.count) {\r\n      alert(\"Bitte (gültige)Fragemenge eingeben\");\r\n    }\r\n\r\n    if (quizConfig.categorie != null & !!quizConfig.count & quizConfig.difficulty != null) {\r\n\r\n      var newApiUrl = \"https://the-trivia-api.com/api/questions?categories=\" +\r\n        formatCat(quizConfig.categorie).toLowerCase() + \"&limit=\" + quizConfig.count + \"&difficulty=\" + quizConfig.difficulty.toLowerCase();\r\n\r\n      setQuizState(\"startet\");\r\n\r\n      getQuestions(newApiUrl)\r\n    }\r\n  }\r\n\r\n  const checkeNameSetState = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (sessionStorage.getItem(\"Username\")) {\r\n      changeQuizState(\"config\");\r\n\r\n    } else {\r\n      alert(\"Bitte einen Namen eingeben!\");\r\n    }\r\n  }\r\n\r\n  const setUserName = (event) => {\r\n    sessionStorage.setItem(\"Username\", event.currentTarget.value)\r\n  }\r\n\r\n  const changeQuizScore = () => {\r\n    sessionStorage.setItem(\"Score\", parseInt(sessionStorage.getItem(\"Score\")) + 1);\r\n  }\r\n\r\n  const changeQuizState = (state) => {\r\n    setQuizState(state);\r\n  }\r\n\r\n  const getQuestions = async (url) => {\r\n    const res = await axios.get(url);\r\n    setQuestions(res.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCartgories = async () => {\r\n      const res = await axios.get(catApiurl);\r\n      setCategories(getCategorieArrayObjext(Object.keys(res.data)));\r\n      setLoading(false);\r\n    };\r\n\r\n    getCartgories();\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      {loading ? (\r\n        <h4>Wait for Api...</h4>) :\r\n        quizState === \"name\" ?\r\n          (\r\n            sessionStorage.clear(),\r\n            <section className=\"takeName\">\r\n              <header>\r\n                <h1> Erstelle dein Random Quiz Schritt 1 von 2</h1>\r\n              </header>\r\n              <UserNameQuiz\r\n                setName={setUserName}\r\n                setStateCheckName={checkeNameSetState}\r\n              ></UserNameQuiz>\r\n\r\n            </section>\r\n\r\n          ) : quizState === \"config\" ? (\r\n\r\n            <section className=\"quizConfig\">\r\n              <header>\r\n                <h1> Erstelle dein Random Quiz Schritt 2 von 2</h1>\r\n              </header>\r\n\r\n              <QuestionCategorys\r\n                setCategorie={getCategory}\r\n                categories={categories}\r\n              ></QuestionCategorys>\r\n\r\n              <QuestionDifficultys\r\n                setDifficulty={getDifficulty}\r\n                difficultys={difficultys}\r\n              ></QuestionDifficultys>\r\n\r\n              <QuestionCount\r\n                setCount={getQuestionCount}\r\n                startQuiz={getQuizConfig}\r\n              ></QuestionCount>\r\n            </section>\r\n\r\n          ) : quizState === \"startet\" ? (\r\n\r\n            sessionStorage.setItem(\"Score\", 0),\r\n\r\n            <section className=\"quizStartet\">\r\n              <header>\r\n                <h1>Quiz</h1>\r\n                <h2>Schwierigkeit: {quizConfig.difficulty} </h2>\r\n                <h2>Kategorie: {quizConfig.categorie}</h2>\r\n              </header>\r\n\r\n              <RandomQuizList\r\n                allQuestions={questions}\r\n                setState={changeQuizState}\r\n                changeScore={changeQuizScore}\r\n              ></RandomQuizList>\r\n\r\n              <p onClick={() => setQuizState(\"config\")} className=' button'>Zurück zur Quiz-Konfig</p>\r\n            </section>\r\n\r\n          ) : (\r\n            <QuizScore\r\n              quizConfig={quizConfig}\r\n              setQuizState={setQuizState}\r\n            ></QuizScore>\r\n          )\r\n      }\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default RandomQuizGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}